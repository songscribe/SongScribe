/*
    SongScribe song notation program
    Copyright (C) 2006-2010 Csaba Kavai

    This file is part of SongScribe.

    SongScribe is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    SongScribe is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

    Created on Jan 23, 2010
*/
package songscribe.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

/**
 * @author Csaba KÃ¡vai
 */
public class LyricsModePanel extends LyricsDialog {
    private JPanel lyricsModePanel;
    private JSplitPane lyricsSplitPane;
    private JSplitPane subSplitPane;

    public LyricsModePanel(MainFrame mainFrame) {
        super(mainFrame);
        lyricsSplitPane.setLeftComponent(syllabifiedLyricsPanel);
        subSplitPane.setTopComponent(underLyricsPanel);
        subSplitPane.setBottomComponent(translatedLyricsPanel);
        MusicSheet musicSheet = mainFrame.getMusicSheet();
        musicSheet.addFocusLostExceptions(lyricsArea);
        musicSheet.addFocusLostExceptions(underSongArea);
        musicSheet.addFocusLostExceptions(translatedArea);
        lyricsArea.addKeyListener(new LyricsKeyListener(true));
        underSongArea.addKeyListener(new LyricsKeyListener(false));
        translatedArea.addKeyListener(new LyricsKeyListener(false));
    }

    public JPanel getLyricsModePanel() {
        return lyricsModePanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        lyricsModePanel = new JPanel();
        lyricsModePanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        lyricsSplitPane = new JSplitPane();
        lyricsSplitPane.setContinuousLayout(true);
        lyricsSplitPane.setResizeWeight(0.5);
        lyricsModePanel.add(lyricsSplitPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        subSplitPane = new JSplitPane();
        subSplitPane.setContinuousLayout(true);
        subSplitPane.setOrientation(0);
        subSplitPane.setResizeWeight(0.5);
        lyricsSplitPane.setRightComponent(subSplitPane);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return lyricsModePanel;
    }

    private class LyricsKeyListener extends KeyAdapter {
        private boolean spellLyricsNecessary;

        private LyricsKeyListener(boolean spellLyricsNecessary) {
            this.spellLyricsNecessary = spellLyricsNecessary;
        }

        public void keyTyped(KeyEvent e) {
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    MusicSheet sheet = mainFrame.getMusicSheet();
                    sheet.getComposition().setLyrics(lyricsArea.getText());
                    sheet.getComposition().setUnderLyrics(underSongArea.getText());
                    sheet.getComposition().setTranslatedLyrics(translatedArea.getText());

                    if (spellLyricsNecessary) {
                        sheet.spellLyrics();
                    }

                    mainFrame.modifiedDocument();
                    sheet.setRepaintImage(true);
                    sheet.repaint();
                }
            });
        }
    }
}
